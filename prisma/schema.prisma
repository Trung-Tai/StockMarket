generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique @db.VarChar(100)
  password      String?        @db.VarChar(200)
  email         String         @unique @db.VarChar(255)
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accountType   AccountType?   @relation(fields: [accountTypeId], references: [id])
  accountTypeId Int?
  accounts      Account[]
  sessions      Session[]
  Watchlist     Watchlist[]
  transactions  Transaction[]
  notifications Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Group {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  stocks StockOnGroup[]
}

model Stock {
  symbol    String         @id
  name      String
  industry  String?
  exchange  String
  quotes    Quote[]
  groups    StockOnGroup[]
  companyId Int?
  company   Company?       @relation(fields: [companyId], references: [id])

  watchlist Watchlist[]
}

model StockOnGroup {
  stockSymbol String
  groupId     Int
  stock       Stock  @relation(fields: [stockSymbol], references: [symbol])
  group       Group  @relation(fields: [groupId], references: [id])

  @@id([stockSymbol, groupId])
}

model Quote {
  id     Int      @id @default(autoincrement())
  symbol String
  date   DateTime
  open   Float
  high   Float
  low    Float
  close  Float
  volume BigInt
  stock  Stock    @relation(fields: [symbol], references: [symbol])
}

model Company {
  id       Int     @id @default(autoincrement())
  name     String
  industry String?
  stocks   Stock[]
}

model Watchlist {
  id          Int      @id @default(autoincrement())
  userId      String
  stockSymbol String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  stock       Stock    @relation(fields: [stockSymbol], references: [symbol])

  @@unique([userId, stockSymbol])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String
  stockSymbol String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Transaction {
  id                 Int      @id @default(autoincrement())
  userId             String
  gateway            String
  transactionDate    DateTime
  accountNumber      String?
  subAccount         String?
  amountIn           Float    @default(0)
  amountOut          Float    @default(0)
  accumulated        Float    @default(0)
  code               String?
  transactionContent String?
  referenceNumber    String?
  body               String?
  createdAt          DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccountType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  users       User[]
}
